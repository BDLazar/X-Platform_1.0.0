package user.impl;

import org.slf4j.Logger;
import user.api.UserAccount;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import static org.slf4j.LoggerFactory.getLogger;

public class UserAccountDAO
{
    private static final Logger LOGGER = getLogger(UserAccountDAO.class);
    private EntityManager postgresSQLDB;

    public UserAccountDAO(EntityManager postgresSQLDB){
        this.postgresSQLDB = postgresSQLDB;
    }

    //region Insert

        /*Inserts a new UserAccount record into the database,
         *The id of the UserAccount is autogenerated on insert, please make sure it is set to null before calling this function*/
        public boolean insert(UserAccount newUserAccount) {

            try
            {
                postgresSQLDB.persist(newUserAccount);
                postgresSQLDB.flush();
                return true;
            }
            catch (Exception ex)
            {
                LOGGER.error("Could not insert user account: {}", ex);
            }

            return false;
        }

    //endregion

    //region Update

        /*Applies updates to an existing UserAccount record in the database,
         *This function assumes it is safe to merge updatedUserAccount to the existing record in the database
         *Please perform required checks on updatedUserAccount before calling this method*/
        public boolean update(UserAccount updatedUserAccount){

            try
            {
                //Merge the updates into the database
                postgresSQLDB.merge(updatedUserAccount);
                postgresSQLDB.flush();
                return true;
            }
            catch (Exception ex)
            {
                LOGGER.error("Could not update user account: {}", ex);
            }

            return false;
        }

    //endregion

    //region Get
        /*Get user account by id
         *DO NOT call getters of lazy loaded properties of UserAccount object returned by this function
         */
        public UserAccount get(Long id){

            try
            {
                Query query = postgresSQLDB.createQuery("SELECT userAccount FROM UserAccount userAccount WHERE userAccount.id=:id");
                query.setParameter("id", id);
                UserAccount userAccount = (UserAccount)query.getResultList().get(0);

                return userAccount;
            }
            catch (Exception ex)
            {
                LOGGER.error("Could not retrieve user account: {}", ex);
            }

            return null;
        }

        /*Get user account by email
         *DO NOT call getters of lazy loaded properties of UserAccount object returned by this function
         */
        public UserAccount get(String email){

            try
            {
                Query query = postgresSQLDB.createQuery("SELECT userAccount FROM UserAccount userAccount WHERE userAccount.email=:email");
                query.setParameter("email", email);
                UserAccount userAccount = (UserAccount)query.getResultList().get(0);

                return userAccount;
            }
            catch (Exception ex)
            {
                LOGGER.error("Could not retrieve user account: ", ex);
            }

            return null;
        }

        /*Get user account by id
         *YOU MAY ONLY call getters of lazy loaded properties of UserAccount object returned by this function if you pass in true for the equivalent loadUser? parameter*/
        public UserAccount get(Long id, boolean loadUserProfiles){

            String selectFromClause = "SELECT userAccount FROM UserAccount userAccount ";
            String joinClause = ""; //we populate the join clause based on the boolean parameters passed into this function
            String whereClause = "WHERE userAccount.id = :id";


            if(loadUserProfiles)
            {
                //we also want to load the user profiles if loadUserProfiles is true
                joinClause = joinClause + "LEFT JOIN FETCH userAccount.userProfiles ";
            }

            try
            {
                Query query = postgresSQLDB.createQuery(selectFromClause + joinClause + whereClause);
                query.setParameter("id", id);
                UserAccount userAccount = (UserAccount)query.getResultList().get(0);

                return userAccount;
            }
            catch (Exception ex)
            {
                LOGGER.error("Could not retrieve user account: ", ex);
            }

            return null;

        }

        /*Get user account by email, profiles are loaded if you pass in true for loadUserProfiles*/
        public UserAccount get(String email, boolean loadUserProfiles){

            String selectFromClause = "SELECT userAccount FROM UserAccount userAccount ";
            String joinClause = ""; //we populate the join clause based on the boolean parameters passed into this function
            String whereClause = "WHERE userAccount.email = :email";


            if(loadUserProfiles)
            {
                //we also want to load the user profiles if loadUserProfiles is true
                joinClause = joinClause + "LEFT JOIN FETCH userAccount.userProfiles ";
            }

            try
            {
                Query query = postgresSQLDB.createQuery(selectFromClause+joinClause+whereClause);
                query.setParameter("email", email);
                UserAccount userAccount = (UserAccount)query.getResultList().get(0);

                return userAccount;
            }
            catch (Exception ex)
            {
                LOGGER.error("Could not retrieve user account: ", ex);
            }

            return null;

        }
    //endregion

    //region Delete

        public boolean delete(Long id)
        {
            try
            {
                Query query = postgresSQLDB.createQuery("DELETE FROM UserAccount userAccount WHERE userAccount.id =:id");
                query.setParameter("id", id);
                int amountDeleted = query.executeUpdate();

                if(amountDeleted > 0)
                {
                    return true;
                }

                return false;
            }

            catch(Exception ex)
            {
                LOGGER.error("Could not delete user account: {}", ex);
            }

            return false;
        }

    //endregion
}
