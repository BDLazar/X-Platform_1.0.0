package user.api;
import common.api.City;
import common.api.Country;
import common.api.Gender;
import common.api.Nationality;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonGenerator;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.annotate.JsonSubTypes;
import org.codehaus.jackson.annotate.JsonTypeInfo;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.ObjectWriter;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.codehaus.jackson.node.ObjectNode;
import org.hibernate.annotations.IndexColumn;

import javax.persistence.*;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.*;

@Entity
@Table(name = "USER_ACCOUNT")
@Inheritance(strategy=InheritanceType.JOINED)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "userAccountType")
@JsonSubTypes(
        {@JsonSubTypes.Type(value = BasicUserAccount.class, name = "BASIC"),
        @JsonSubTypes.Type(value = StandardUserAccount.class, name = "STANDARD") })
public abstract class UserAccount {

    //region Properties
    @Id
    @GeneratedValue
    private Long id;

    @Enumerated(EnumType.STRING)
    private UserAccountType userAccountType;

    @OneToMany(fetch = FetchType.LAZY, cascade={CascadeType.ALL}, orphanRemoval = true)
    @MapKey(name="id")
    private Map<Long, UserProfile> userProfiles;
    //endregion

    //region Constructors

    public UserAccount() {
    }

    public UserAccount(UserAccountType userAccountType) {

        this.userAccountType = userAccountType;

    }
    //endregion

    //region Getters & Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public UserAccountType getUserAccountType() {
        return userAccountType;
    }

    public void setUserAccountType(UserAccountType userAccountType) {
        this.userAccountType = userAccountType;
    }

    public Map<Long, UserProfile> getUserProfiles() {
        return userProfiles;
    }

    public void setUserProfiles(Map<Long, UserProfile> userProfiles) {
        this.userProfiles = userProfiles;
    }

    //endregion

    //region Parsers
    public ObjectNode toJson(){

        ObjectMapper jsonMapper = new ObjectMapper();

        try {

            ObjectWriter objectWriter = new ObjectMapper().writer().withDefaultPrettyPrinter();
            String jsonString = objectWriter.writeValueAsString(this);
            JsonNode jsonNode = jsonMapper.readTree(jsonString);
            return (ObjectNode)jsonNode;

        } catch (Exception ex){

            return null;
        }

    }
    //endregion

    //region Business Methods
    public void addUserProfile(UserProfile userProfile)
    {
        //just incase it is the first time we add
        if(this.userProfiles == null)
        {
            this.userProfiles = new HashMap<Long,UserProfile>();

        }
        //the id will be automatically generated by JPA so we set to null
        this.userProfiles.put(null,userProfile);

    }
    //endregion
}
